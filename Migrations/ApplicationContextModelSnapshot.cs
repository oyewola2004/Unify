// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UNIFY.Context;

namespace UNIFY.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("Model.Entities.MarketPlace", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyWebsite")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("MemberId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ServiceRendering")
                        .HasColumnType("text");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("MarketPlaces");
                });

            modelBuilder.Entity("Model.Entities.MemberMailService", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("MessageContent")
                        .HasColumnType("text");

                    b.Property<string>("MessageSubject")
                        .HasColumnType("text");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MemberMailService");
                });

            modelBuilder.Entity("Model.Entities.MemberMailServiceMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("MemberId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("MemberMailServiceId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberMailServiceId");

                    b.ToTable("MemberMailServiceMember");
                });

            modelBuilder.Entity("UNIFY.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("UNIFY.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("AddressId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UNIFY.Identity.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("AddressDescription")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LocalGovernment")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CommentId")
                        .HasColumnType("text");

                    b.Property<string>("CommentText")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("MemberId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("MessageId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("PostId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("MessageId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Community", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("AddressId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CommunityDocument")
                        .HasColumnType("text");

                    b.Property<string>("CommunityId")
                        .HasColumnType("text");

                    b.Property<string>("CommunityName")
                        .HasColumnType("text");

                    b.Property<string>("CommunityPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("MarketId")
                        .HasColumnType("text");

                    b.Property<string>("MarketPlaceId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("MemberId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("MarketPlaceId");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.CommunitySecurity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CommunityId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("SecurityId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("SecurityId");

                    b.ToTable("CommunitySecurity");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Member", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("AddressId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CommunityId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MessageId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Portfolio")
                        .HasColumnType("text");

                    b.Property<string>("Skills")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CommunityId");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Members");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("MessageContent")
                        .HasColumnType("text");

                    b.Property<string>("MessageId")
                        .HasColumnType("text");

                    b.Property<string>("MessageSubject")
                        .HasColumnType("text");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Security", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("AddressId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CommunityId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("SecurityAgencyId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("SecurityEmail")
                        .HasColumnType("text");

                    b.Property<string>("SecurityFirstName")
                        .HasColumnType("text");

                    b.Property<string>("SecurityId")
                        .HasColumnType("text");

                    b.Property<string>("SecurityLastName")
                        .HasColumnType("text");

                    b.Property<string>("SecurityOrganization")
                        .HasColumnType("text");

                    b.Property<string>("SecurityPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("SecurityAgencyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Securities");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.SecurityAgency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("AddressId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("SecurityAgencies");
                });

            modelBuilder.Entity("Unify.UNIFY.Model.Entities.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("ISReported")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("MemberId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("PostContent")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("VideoFile")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MemberId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Unify.UNIFY.Model.Entities.PostLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("PostId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("PostUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostId")
                        .IsUnique();

                    b.ToTable("PostLogs");
                });

            modelBuilder.Entity("Model.Entities.MarketPlace", b =>
                {
                    b.HasOne("UNIFY.Model.Entities.Member", "Member")
                        .WithMany("MarketPlaces")
                        .HasForeignKey("MemberId");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Model.Entities.MemberMailServiceMember", b =>
                {
                    b.HasOne("UNIFY.Model.Entities.Member", "Member")
                        .WithMany("MemberMailServiceMember")
                        .HasForeignKey("MemberId");

                    b.HasOne("Model.Entities.MemberMailService", "MemberMailService")
                        .WithMany("MemberMailServiceMember")
                        .HasForeignKey("MemberMailServiceId");

                    b.Navigation("Member");

                    b.Navigation("MemberMailService");
                });

            modelBuilder.Entity("UNIFY.Identity.User", b =>
                {
                    b.HasOne("UNIFY.Model.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("UNIFY.Identity.UserRole", b =>
                {
                    b.HasOne("UNIFY.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("UNIFY.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Admin", b =>
                {
                    b.HasOne("UNIFY.Identity.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("UNIFY.Model.Entities.Admin", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Comment", b =>
                {
                    b.HasOne("UNIFY.Model.Entities.Member", "Member")
                        .WithMany("Comments")
                        .HasForeignKey("MemberId");

                    b.HasOne("UNIFY.Model.Entities.Message", null)
                        .WithMany("Comments")
                        .HasForeignKey("MessageId");

                    b.HasOne("Unify.UNIFY.Model.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.Navigation("Member");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Community", b =>
                {
                    b.HasOne("UNIFY.Model.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Model.Entities.MarketPlace", "MarketPlace")
                        .WithMany()
                        .HasForeignKey("MarketPlaceId");

                    b.Navigation("Address");

                    b.Navigation("MarketPlace");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.CommunitySecurity", b =>
                {
                    b.HasOne("UNIFY.Model.Entities.Community", "Community")
                        .WithMany("CommunitySecurities")
                        .HasForeignKey("CommunityId");

                    b.HasOne("UNIFY.Model.Entities.Security", "Security")
                        .WithMany("CommunitySecurities")
                        .HasForeignKey("SecurityId");

                    b.Navigation("Community");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Member", b =>
                {
                    b.HasOne("UNIFY.Model.Entities.Address", "Address")
                        .WithOne("Member")
                        .HasForeignKey("UNIFY.Model.Entities.Member", "AddressId");

                    b.HasOne("UNIFY.Model.Entities.Community", "Community")
                        .WithMany("Members")
                        .HasForeignKey("CommunityId");

                    b.HasOne("UNIFY.Model.Entities.Message", "Messages")
                        .WithOne("Member")
                        .HasForeignKey("UNIFY.Model.Entities.Member", "MessageId");

                    b.HasOne("UNIFY.Identity.User", "User")
                        .WithOne("Member")
                        .HasForeignKey("UNIFY.Model.Entities.Member", "UserId");

                    b.Navigation("Address");

                    b.Navigation("Community");

                    b.Navigation("Messages");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Security", b =>
                {
                    b.HasOne("UNIFY.Model.Entities.Address", "Address")
                        .WithOne("Security")
                        .HasForeignKey("UNIFY.Model.Entities.Security", "AddressId");

                    b.HasOne("UNIFY.Model.Entities.SecurityAgency", "SecurityAgencies")
                        .WithMany("Securities")
                        .HasForeignKey("SecurityAgencyId");

                    b.HasOne("UNIFY.Identity.User", "User")
                        .WithOne("Security")
                        .HasForeignKey("UNIFY.Model.Entities.Security", "UserId");

                    b.Navigation("Address");

                    b.Navigation("SecurityAgencies");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.SecurityAgency", b =>
                {
                    b.HasOne("UNIFY.Model.Entities.Address", "Address")
                        .WithOne("SecurityAgency")
                        .HasForeignKey("UNIFY.Model.Entities.SecurityAgency", "AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Unify.UNIFY.Model.Entities.Post", b =>
                {
                    b.HasOne("UNIFY.Model.Entities.Category", "Category")
                        .WithMany("Post")
                        .HasForeignKey("CategoryId");

                    b.HasOne("UNIFY.Model.Entities.Member", "Member")
                        .WithMany("Posts")
                        .HasForeignKey("MemberId");

                    b.HasOne("UNIFY.Identity.User", "User")
                        .WithOne("Post")
                        .HasForeignKey("Unify.UNIFY.Model.Entities.Post", "UserId");

                    b.Navigation("Category");

                    b.Navigation("Member");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Unify.UNIFY.Model.Entities.PostLog", b =>
                {
                    b.HasOne("Unify.UNIFY.Model.Entities.Post", "Post")
                        .WithOne("PostLog")
                        .HasForeignKey("Unify.UNIFY.Model.Entities.PostLog", "PostId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Model.Entities.MemberMailService", b =>
                {
                    b.Navigation("MemberMailServiceMember");
                });

            modelBuilder.Entity("UNIFY.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("UNIFY.Identity.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Member");

                    b.Navigation("Post");

                    b.Navigation("Security");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Address", b =>
                {
                    b.Navigation("Member");

                    b.Navigation("Security");

                    b.Navigation("SecurityAgency");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Category", b =>
                {
                    b.Navigation("Post");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Community", b =>
                {
                    b.Navigation("CommunitySecurities");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Member", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("MarketPlaces");

                    b.Navigation("MemberMailServiceMember");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Message", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.Security", b =>
                {
                    b.Navigation("CommunitySecurities");
                });

            modelBuilder.Entity("UNIFY.Model.Entities.SecurityAgency", b =>
                {
                    b.Navigation("Securities");
                });

            modelBuilder.Entity("Unify.UNIFY.Model.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostLog");
                });
#pragma warning restore 612, 618
        }
    }
}
